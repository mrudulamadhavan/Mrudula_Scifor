# -*- coding: utf-8 -*-
"""Assignment 2 - Abstraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C2Lhw8T4Opf6xlVoUk6qSMJZE52oBwIm

## Abstraction in Python
Abstraction is one of the key principles of Object-Oriented Programming (OOP). It involves simplifying complex systems by modelling classes based on the essential properties and behaviours, while ignoring or hiding unnecessary details. Abstraction allows you to focus on what an object does rather than how it achieves its functionality. In Python, abstraction is often achieved through abstract classes and abstract methods.
## Abstract Classes and Abstract Methods:
* An abstract class in object-oriented programming is a class that cannot be instantiated on its own and is meant to be subclassed by other classes. Abstract classes serve as a blueprint for other classes, providing a common interface and a set of methods that must be implemented by the concrete subclasses. Abstract classes may also contain both abstract methods and concrete methods.
* Abstract methods, on the other hand, are methods declared in an abstract class that do not have an implementation in the abstract class itself. Instead, the responsibility of implementing these methods is left to the concrete subclasses. Abstract methods are defined using the @abstractmethod decorator in Python.
"""

# Code Implementation
from abc import ABC, abstractmethod

# Abstract class with an abstract method
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    def perimeter(self):
        pass


# Concrete subclass implementing the abstract method
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

    def perimeter(self):
        return 2 * 3.14 * self.radius

# Concrete subclass implementing the abstract method
class Square(Shape):
    def __init__(self, side):
        self.side = side

    def area(self):
        return self.side ** 2

    def perimeter(self):
        return 4 * self.side

# Creating objects of concrete subclasses
circle = Circle(5)
square = Square(4)

# Calling the abstract method on concrete objects
print("For Circle,")
print(f" > Area: {circle.area()}")
print(f" > Perimeter: {round(circle.perimeter(),3)}")

print("For Square")
print(f" > Area: {square.area()}")
print(f" > Perimeter: {square.perimeter()}")

"""* Shape is an abstract class with one abstract methods area and perimeter
* Circle and Square are concrete subclasses of Shape that provide implementations for the abstract method area and perimeter.
* Objects of Circle and Square can be created and used polymorphically through the common interface provided by the abstract class Shape.
"""